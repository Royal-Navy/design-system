name: Build & Test

on:
  pull_request:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  Build_icon_library:
    runs-on: ubuntu-latest
    steps:
      - name: Git clone repository
        uses: actions/checkout@v3

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Cache Cypress binary
        uses: actions/cache@v3
        with:
          path: ~/.cache/Cypress
          key: cypress-${{ runner.os }}-cypress-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            cypress-${{ runner.os }}-cypress-

      - name: Build icon-library
        run: |
          yarn install --frozen-lockfile
          yarn --cwd packages/icon-library build

      - name: Build design-tokens
        run: yarn --cwd packages/design-tokens build

      - name: Create tar
        run: |
          cp -R packages/icon-library/dist distil
          cp -R packages/design-tokens/dist distdt
          tar -czvf dist.tar.gz distil distdt

      - name: Persist artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ./dist.tar.gz

  Security_audit:
    runs-on: ubuntu-latest
    steps:
      - name: Git clone repository
        uses: actions/checkout@v3

      - name: Run audit
        run: yarn run audit

  Check_commits:
    runs-on: ubuntu-latest
    needs: Build_icon_library
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: Git clone repository
        uses: actions/checkout@v3

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: check commits
        run: |
          node ./scripts/commitlint ${{ github.event.pull_request._links.html.href }}
          node ./scripts/check-fixup ${{ github.event.pull_request._links.html.href }}

  Lint_react-component-library:
    runs-on: ubuntu-latest
    steps:
      - name: Git clone repository
        uses: actions/checkout@v3

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Get dependencies & run lint
        run: |
          yarn install --frozen-lockfile
          yarn --cwd packages/react-component-library lint

  Test_design-tokens:
    runs-on: ubuntu-latest
    needs: [Build_icon_library]
    steps:
      - name: Git clone repository
        uses: actions/checkout@v3

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Jest design-tokens
        run: |
          yarn --cwd packages/design-tokens build
          yarn --cwd packages/design-tokens test

  # See post_built_and_test.yml for details about how this is used
  Build_storybook:
    runs-on: ubuntu-latest
    needs: [Build_icon_library]
    steps:
      - name: Git clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Attach workspace
        uses: actions/download-artifact@v3
        with:
          name: dist

      - name: Build Storybook
        env:
          CHROMATIC_SHA: ${{ github.event.pull_request.head.sha || github.sha }}
          CHROMATIC_BRANCH: ${{ github.head_ref || github.ref_name }}
          CHROMATIC_SLUG: ${{ github.event.pull_request.head.repo.full_name || github.repository }}
        run: |
          tar -xzf dist.tar.gz && mv distil packages/icon-library/dist && mv distdt packages/design-tokens/dist
          yarn --cwd packages/react-component-library storybook:static
          cd packages/react-component-library
          npm exec --no -- chromatic --project-token=${{secrets.CHROMATIC_TOKEN}} --storybook-build-dir=.static_storybook
